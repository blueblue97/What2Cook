<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>What2Cook</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .dark-green { background-color: #166534; } /* Dark green color */
        .dark-green-hover:hover { background-color: #14532d; } /* Slightly darker hover effect */
    </style>
</head>
<body class="bg-gray-100 p-6 flex flex-col items-center">

<div class="max-w-xl bg-white shadow-xl rounded-lg p-6 w-full">
    <h1 class="text-3xl font-bold text-center mb-4 text-gray-800">üçΩÔ∏è What2Cook</h1>
    <p class="mb-4 text-gray-600 text-center">Enter the ingredients you have:</p>
    
    <div id="ingredients-container" class="space-y-2">
        <input type="text" class="w-full border rounded p-3 focus:ring-2 focus:ring-green-500" placeholder="Type an ingredient..." />
    </div>
    <button id="addIngredient" class="mt-3 bg-blue-500 text-white p-2 rounded dark-green-hover transition w-full">
        + Add Ingredient
    </button>

    <select id="recipeType" class="w-full border rounded p-3 mt-4 focus:ring-2 focus:ring-green-500">
        <option value="any">Any Recipe</option>
        <option value="vegetarian">Vegetarian</option>
        <option value="vegan">Vegan</option>
        <option value="gluten-free">Gluten-Free</option>
        <option value="low-carb">Low Carb</option>
        <option value="high-protein">High Protein</option>
        <option value="keto">Keto</option>
        <option value="paleo">Paleo</option>
        <option value="mediterranean">Mediterranean</option>
        <option value="dairy-free">Dairy-Free</option>
        <option value="nut-free">Nut-Free</option>
        <option value="quick-meals">Quick Meals</option>
        <option value="slow-cooked">Slow Cooked</option>
        <option value="budget-friendly">Budget-Friendly</option>
        <option value="gourmet">Gourmet</option>
        <option value="spicy">Spicy</option>
        <option value="kid-friendly">Kid-Friendly</option>
        <option value="desserts">Desserts</option>
        <option value="breakfast">Breakfast</option>
        <option value="snacks">Snacks</option>
        <option value="vegetarian">Vegetarian</option>
        <option value="vegan">Vegan</option>
        <option value="gluten-free">Gluten-Free</option>
        <option value="low-carb">Low Carb</option>
    </select>

    <button id="searchBtn" class="mt-4 w-full text-white p-3 rounded dark-green dark-green-hover transition">
        Find Recipe
    </button>

    <div id="loadingSpinner" class="hidden text-center mt-4">
        <p class="text-gray-600">Generating your recipe...</p>
        <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-green-500 mx-auto"></div>
    </div>

    <div id="recipes" class="mt-6 space-y-4"></div>
</div>

<!-- Saved Recipes Section (Dropdown) -->
<div class="max-w-xl bg-white shadow-xl rounded-lg p-4 mt-6 w-full">
    <button id="toggleFavorites" class="w-full text-left font-semibold text-gray-800 flex justify-between">
        Saved Recipes <span id="arrow">‚ñº</span>
    </button>
    <ul id="favoritesList" class="list-disc ml-6 text-gray-600 mt-2 hidden"></ul>
</div>

<script>
const searchBtn = document.getElementById('searchBtn');
const recipesDiv = document.getElementById('recipes');
const favoritesList = document.getElementById('favoritesList');
const loadingSpinner = document.getElementById('loadingSpinner');
const toggleFavorites = document.getElementById('toggleFavorites');
const arrow = document.getElementById('arrow');
const addIngredientBtn = document.getElementById('addIngredient');
const ingredientsContainer = document.getElementById('ingredients-container');
const recipeType = document.getElementById('recipeType');

// Add more ingredient input fields
addIngredientBtn.addEventListener('click', () => {
    const input = document.createElement('input');
    input.type = 'text';
    input.className = 'w-full border rounded p-3 focus:ring-2 focus:ring-green-500';
    input.placeholder = 'Type an ingredient...';
    ingredientsContainer.appendChild(input);
});

// Toggle saved recipes visibility
let isFavoritesVisible = false;
toggleFavorites.addEventListener('click', () => {
    isFavoritesVisible = !isFavoritesVisible;
    favoritesList.classList.toggle('hidden');
    arrow.textContent = isFavoritesVisible ? '‚ñ≤' : '‚ñº';
});

// Load saved recipes from local storage
function loadFavorites() {
    const favorites = JSON.parse(localStorage.getItem('favorites')) || [];
    favoritesList.innerHTML = '';

    if (favorites.length === 0) {
        favoritesList.innerHTML = '<p class="text-gray-500">No saved recipes yet.</p>';
        return;
    }

    favorites.forEach((recipe, index) => {
        const li = document.createElement('li');
        li.innerHTML = `<button class="text-blue-500 hover:underline" onclick="alert('${recipe.replace(/'/g, '\'')}')">${recipe.substring(0, 30)}...</button>
            <button class="ml-2 text-red-500 hover:text-red-700" onclick="removeFavorite(${index})">‚ùå</button>`;
        favoritesList.appendChild(li);
    });
}

// Save recipe to local storage
function saveFavorite(recipe) {
    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];
    favorites.push(recipe);
    localStorage.setItem('favorites', JSON.stringify(favorites));
    loadFavorites();
}

// Remove a saved recipe
function removeFavorite(index) {
    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];
    favorites.splice(index, 1);
    localStorage.setItem('favorites', JSON.stringify(favorites));
    loadFavorites();
}

searchBtn.addEventListener('click', () => {
    const ingredientInputs = document.querySelectorAll('#ingredients-container input');
    const ingredients = Array.from(ingredientInputs).map(input => input.value.trim()).filter(value => value !== '');
    
    if (ingredients.length === 0) {
        alert('Please enter at least one ingredient!');
        return;
    }

    const selectedType = recipeType.value;

    // Show loading spinner
    loadingSpinner.classList.remove("hidden");
    recipesDiv.innerHTML = '';

    fetch('https://what2cook-backend.onrender.com/generate_recipe', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ ingredients, type: selectedType })
    })
    .then(res => res.json())
    .then(data => {
        // Hide loading spinner
        loadingSpinner.classList.add("hidden");

        if (data.error) {
            recipesDiv.innerHTML = `<p class="text-red-500">${data.error}</p>`;
        } else {
            recipesDiv.innerHTML = `
                <div class="p-4 bg-gray-50 rounded shadow">
                    <h3 class="font-semibold text-lg text-gray-800">Recipe</h3>
                    <p class="text-gray-600 mt-2">${data.recipe.replace(/\n/g, '<br>')}</p>
                    <button class="mt-2 bg-blue-500 text-white p-2 rounded dark-green-hover transition"
                        onclick="saveFavorite('${data.recipe.replace(/\n/g, ' ')}')">
                        Save Recipe
                    </button>
                </div>`;
        }
    })
    .catch(err => {
        loadingSpinner.classList.add("hidden");
        recipesDiv.innerHTML = '<p class="text-red-500">Error generating recipe. Try again later.</p>';
        console.error(err);
    });
});

// Load saved recipes when the page loads
window.onload = loadFavorites;
</script>

</body>
</html>
